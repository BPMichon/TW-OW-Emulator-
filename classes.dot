digraph "classes" {
rankdir=BT
charset="utf-8"
"main.player_p.AI" [color="black", fontcolor="black", label=<{AI|SpecialityNumber<br ALIGN="LEFT"/>SpecialityUsed : bool<br ALIGN="LEFT"/>alchemyCards : int<br ALIGN="LEFT"/>alive : bool<br ALIGN="LEFT"/>combat_heuristic : dict<br ALIGN="LEFT"/>|PlayerStateHeuristic(board)<br ALIGN="LEFT"/>choose_best_combo(combos)<br ALIGN="LEFT"/>choose_move(board)<br ALIGN="LEFT"/>evaluate_combo(combo)<br ALIGN="LEFT"/>initiate_fight_monster(monster: Monster, debug)<br ALIGN="LEFT"/>player_fight_turn(monster: Monster)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"main.board.Board" [color="black", fontcolor="black", label=<{Board|graph<br ALIGN="LEFT"/>market<br ALIGN="LEFT"/>monster_kills : int<br ALIGN="LEFT"/>players<br ALIGN="LEFT"/>stats : list<br ALIGN="LEFT"/>|combat_evaluation(player, difficulty)<br ALIGN="LEFT"/>display()<br ALIGN="LEFT"/>display_monsters()<br ALIGN="LEFT"/>explore(player: player_p.Player, RNG, choice)<br ALIGN="LEFT"/>explore_evaluation(player)<br ALIGN="LEFT"/>is_monster(location_id)<br ALIGN="LEFT"/>location_action(location_id, player: player_p.Player)<br ALIGN="LEFT"/>make_monster(difficulty)<br ALIGN="LEFT"/>meditate_evaluation(player: player_p.AI)<br ALIGN="LEFT"/>move(player: player_p.Player, move, debug)<br ALIGN="LEFT"/>randomise_monsters()<br ALIGN="LEFT"/>simulate_move(player: player_p.Player, depth, current_depth)<br ALIGN="LEFT"/>spawn_monster(terrain, difficulty)<br ALIGN="LEFT"/>start_game(turn_number, debug, game_stats)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"main.card.Card" [color="black", fontcolor="black", label=<{Card|ability : dict<br ALIGN="LEFT"/>colour : str<br ALIGN="LEFT"/>combos : dict<br ALIGN="LEFT"/>cost : int<br ALIGN="LEFT"/>id : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>terrain : str<br ALIGN="LEFT"/>|<I>combo_colours</I>()<br ALIGN="LEFT"/>state()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"main.locations.GameMap" [color="black", fontcolor="black", label=<{GameMap|graph : Graph<br ALIGN="LEFT"/>|load_from_data(locations)<br ALIGN="LEFT"/>load_from_file(filepath)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>visual()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"main.card.ItemGraph" [color="black", fontcolor="black", label=<{ItemGraph|graph : DiGraph<br ALIGN="LEFT"/>|generate_sequences()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"main.board.MARKET" [color="black", fontcolor="black", label=<{MARKET|bank : list<br ALIGN="LEFT"/>deck : list<br ALIGN="LEFT"/>|bank_print()<br ALIGN="LEFT"/>buy_random(player: player_p.Player)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"main.player_p.Monster" [color="black", fontcolor="black", label=<{Monster|alive : bool<br ALIGN="LEFT"/>difficulty<br ALIGN="LEFT"/>easy_hp : list<br ALIGN="LEFT"/>fight_deck : list<br ALIGN="LEFT"/>hard_hp : list<br ALIGN="LEFT"/>hp_deck : list<br ALIGN="LEFT"/>medium_hp : list<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|initiate_fight()<br ALIGN="LEFT"/>is_alive()<br ALIGN="LEFT"/>play_top_card()<br ALIGN="LEFT"/>take_dmg(number)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"main.player_p.Player" [color="black", fontcolor="black", label=<{Player|Alchemy : int<br ALIGN="LEFT"/>AlchemyVP : bool<br ALIGN="LEFT"/>Combat : int<br ALIGN="LEFT"/>CombatVP : bool<br ALIGN="LEFT"/>Defense : int<br ALIGN="LEFT"/>DefenseVP : bool<br ALIGN="LEFT"/>Speciality : int<br ALIGN="LEFT"/>SpecialityNumber : int<br ALIGN="LEFT"/>SpecialityUsed : bool<br ALIGN="LEFT"/>SpecialityVP : bool<br ALIGN="LEFT"/>alchemyCards : int<br ALIGN="LEFT"/>alive : bool<br ALIGN="LEFT"/>current_position<br ALIGN="LEFT"/>deck : list<br ALIGN="LEFT"/>discard : list<br ALIGN="LEFT"/>gold : int<br ALIGN="LEFT"/>hand : list<br ALIGN="LEFT"/>level : int<br ALIGN="LEFT"/>monster_attempts : int<br ALIGN="LEFT"/>monster_wins : int<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>p3_draw_modifier : int<br ALIGN="LEFT"/>school<br ALIGN="LEFT"/>shield : int<br ALIGN="LEFT"/>victory_points : int<br ALIGN="LEFT"/>visited_nodes : dict<br ALIGN="LEFT"/>won : bool<br ALIGN="LEFT"/>|UpShield(amount)<br ALIGN="LEFT"/>UpStat(stat)<br ALIGN="LEFT"/>add_card(card: Card)<br ALIGN="LEFT"/>check_fight_status(monster: Monster, debug)<br ALIGN="LEFT"/>discard_card(card: Card)<br ALIGN="LEFT"/>discard_random()<br ALIGN="LEFT"/>draw(number)<br ALIGN="LEFT"/>draw_in_combat(number_to_draw)<br ALIGN="LEFT"/>evaluate_combo_2(cards)<br ALIGN="LEFT"/>get_combos()<br ALIGN="LEFT"/>get_valid_moves(board)<br ALIGN="LEFT"/>get_valid_moves_all(board)<br ALIGN="LEFT"/>hand_strength(hand)<br ALIGN="LEFT"/>hand_strength_after(discarded_cards)<br ALIGN="LEFT"/>initiate_fight_monster_human(monster: Monster, debug)<br ALIGN="LEFT"/>is_alive()<br ALIGN="LEFT"/>is_combo_pair(card_a, card_b)<br ALIGN="LEFT"/>monster_fight_turn(monster: Monster)<br ALIGN="LEFT"/>move_to_discard(combo)<br ALIGN="LEFT"/>player_fight_turn_human(monster: Monster)<br ALIGN="LEFT"/>prepare_decks()<br ALIGN="LEFT"/>state()<br ALIGN="LEFT"/>take_dmg(number)<br ALIGN="LEFT"/>terrain_hand()<br ALIGN="LEFT"/>valid_combo(cards)<br ALIGN="LEFT"/>visit_location(location)<br ALIGN="LEFT"/>weakest_card(cards: list, terrain)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"main.player_p.AI" -> "main.player_p.Player" [arrowhead="empty", arrowtail="none"];
"main.board.MARKET" -> "main.board.Board" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="market", style="solid"];
}
